Strings are immutable - once a string object is created, it can neevr be changed.
Itâ€™s not a primitive data type like int and long. String class represents character Strings. 
Strings are 16-bit Unicode characters
2 ways to create strings

1. Strings s = new String()
2. s = "abcdef"
 Immutablity
 -----------
 An immutable object is an object whose internal state remains constant after it has been entirely created. This means that once the object has been assigned to a 
 variable, we can neither update the reference nor mutate the internal state by any means.
 In Java, variables are mutable by default, meaning we can change the value they hold.

By using the final keyword when declaring a variable, the Java compiler won't let us change the value of that variable. Instead, it will report a compile-time error:

	final String name = "baeldung";
	name = "bael...";
  
  final String name = "baeldung";
	name = "bael...";

Note that final only forbids us from changing the reference the variable holds, it doesn't protect us from changing the internal state of the object it refers to by using its public API:

	final List<String> strings = new ArrayList<>();
	assertEquals(0, strings.size());
	strings.add("baeldung");
  
  The second assertEquals will fail because adding an element to the list changes its size, therefore, it isn't an immutable object.
  
  Now that we know how to avoid changes to the content of a variable, we can use it to build the API of immutable objects.

Building the API of an immutable object requires us to guarantee that its internal state won't change no matter how we use its API.

A step forward in the right direction is to use final when declaring its attributes:

	class Money {
	    private final double amount;
	    private final Currency currency;
	 
	    // ...
	}

Note that Java guarantees us that the value of amount won't change, that's the case with all primitive type variables.

However, in our example we are only guaranteed that the currency won't change, so we must rely on the Currency API to protect itself from changes.

Most of the time, we need the attributes of an object to hold custom values, and the place to initialize the internal state of an immutable object is its constructor:

	class Money {
	    // ...
	    public Money(double amount, Currency currency) {
	        this.amount = amount;
	        this.currency = currency;
	    }
	 
	    public Currency getCurrency() {
	        return currency;
	    }
	 
	    public double getAmount() {
	        return amount;
	    }
	}

As we've said before, to meet the requirements of an immutable API, our Money class only has read-only methods.
Using the reflection API, we can break immutability and change immutable objects. However, reflection violates immutable object's public API, and usually, we should avoid doing this.
https://github.com/eugenp/tutorials/tree/master/core-java-modules/core-java-lang-oop-patterns
